let TERMS_CACHE=null;
async function fetchTerms(){ if(TERMS_CACHE) return TERMS_CACHE; const res=await fetch('data/terms.json',{cache:'no-store'}); TERMS_CACHE=await res.json(); return TERMS_CACHE; }
function esc(s=''){return (''+s).replace(/[&<>'"]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]));}
function hi(text,q){ if(!q) return esc(text); const re=new RegExp('('+q.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')+')','ig'); return esc(text).replace(re,'<mark>$1</mark>'); }
function slugify(str=''){ return (str||'その他').toString().trim().toLowerCase().replace(/[（）()\s]+/g,'-').replace(/[^\u3040-\u30ff\u4e00-\u9faf\w\-]+/g,'').replace(/\-+/g,'-').replace(/^\-|\-$/g,''); }
function card(t,q){ const alias=t.alias&&t.alias.length?`<span class="tag">別名: ${esc(t.alias.join(', '))}</span>`:''; const usage=t.usage?`<p><strong>使い方:</strong> ${esc(t.usage)}</p>`:''; const variants=t.variants&&t.variants.length?`<details><summary>バリエーション</summary><ul>${t.variants.map(v=>`<li>${esc(v)}</li>`).join('')}</ul></details>`:''; const pitfalls=t.pitfalls?`<p class="muted"><strong>注意:</strong> ${esc(t.pitfalls)}</p>`:''; const notes=t.notes?`<p class="muted"><strong>補足:</strong> ${esc(t.notes)}</p>`:''; const tv=t.tvSymbol?`<a href="https://jp.tradingview.com/chart/?symbol=${encodeURIComponent(t.tvSymbol)}" target="_blank" rel="noopener">チャートを開く ↗</a>`:''; return `<div class="card term"><h4 class="term-title">${hi(t.title,q)}</h4><div class="meta">${t.category?`<span class="tag">${esc(t.category)}</span>`:''}${alias}</div><p>${hi(t.definition||'',q)}</p>${t.formula?`<p><strong>計算式:</strong> ${esc(t.formula)}</p>`:''}${usage}${variants}${pitfalls}${notes}<div class="actions">${tv}</div></div>`; }
function groupByCategory(items){const m=new Map(); for(const t of items){const c=t.category||'その他'; if(!m.has(c)) m.set(c,[]); m.get(c).push(t);} return [...m.entries()].sort((a,b)=>a[0].localeCompare(b[0],'ja')).map(([c,arr])=>[c, arr.sort((x,y)=>(x.title||'').localeCompare(y.title||'','ja'))]);}
async function render(q=''){ const root=document.getElementById('results'); const all=await fetchTerms(); const key=(q||'').trim().toLowerCase(); const filtered=!key?all:all.filter(t=>(((t.title||'')+' '+(t.alias||[]).join(' ')+' '+(t.definition||'')+' '+(t.usage||'')+' '+(t.pitfalls||'')).toLowerCase().includes(key))); const groups=groupByCategory(filtered); // build sections with anchors
  root.innerHTML=groups.map(([cat,arr])=>{ const id='cat-'+slugify(cat); const cards=arr.map(t=>card(t,key)).join(''); return `<section id="${id}" class="term-category"><h2 class="cat-heading">${esc(cat)}</h2><div class="cat-group">${cards}</div></section>`; }).join('')||`<div class="card"><p>該当がありません。</p></div>`;
  // TOC -> category pages (pre-generated)
  const toc=document.getElementById('toc-links'); if(toc){ toc.innerHTML=groups.map(([cat,arr])=>{ const href = (window.CAT_TO_FILE && window.CAT_TO_FILE[cat]) ? window.CAT_TO_FILE[cat] : ('#cat-'+slugify(cat)); return `<a href="${href}" class="toc-link">${esc(cat)} <span class="count">(${arr.length})</span></a>`; }).join(''); }
}
window.renderTerms=render;